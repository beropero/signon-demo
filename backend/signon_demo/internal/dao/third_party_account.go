// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"signon_demo/internal/dao/internal"
	"signon_demo/internal/model/entity"
)

// internalThirdPartyAccountDao is internal type for wrapping internal DAO implements.
type internalThirdPartyAccountDao = *internal.ThirdPartyAccountDao

// thirdPartyAccountDao is the data access object for table third_party_account.
// You can define custom methods on it to extend its functionality as you wish.
type thirdPartyAccountDao struct {
	internalThirdPartyAccountDao
}

var (
	// ThirdPartyAccount is globally public accessible object for table third_party_account operations.
	ThirdPartyAccount = thirdPartyAccountDao{
		internal.NewThirdPartyAccountDao(),
	}
)

// Fill with you ideas below.
// 添加第三方平台账号
func AddTpAccount(ctx context.Context, tpAccount entity.ThirdPartyAccount) (err error){
	_, err = ThirdPartyAccount.Ctx(ctx).Data(tpAccount).OmitEmpty().Insert()
	return
}

// 查询第三方账号是否存在
func TpAccountExists(ctx context.Context, tpName string, accountInfo string) (exists bool) {
	count, _ := ThirdPartyAccount.Ctx(ctx).Where("name=? and account_info like \"%?%\"", tpName, accountInfo).Count()
	return count != 0
}

// 获取指定第三方账号
func OneTpAccount(ctx context.Context, tpInfo entity.ThirdPartyAccount) (res entity.ThirdPartyAccount, err error) {
	ThirdPartyAccount.Ctx(ctx).Where("user_id=? and name=?", tpInfo.UserId, tpInfo.Name).Scan(&res)
	return
}

// 获取用户所有第三方账号
func AllTpAccount(ctx context.Context, userId int) (res []entity.ThirdPartyAccount, err error) {
	ThirdPartyAccount.Ctx(ctx).Where("user_id=?", userId).Scan(&res)
	return
}
